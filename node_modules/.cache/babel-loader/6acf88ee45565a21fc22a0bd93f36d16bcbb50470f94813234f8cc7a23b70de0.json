{"ast":null,"code":"var _jsxFileName = \"/home/jaona/myfiles/Jaona/Components/dashboard/src/utilsComponents/Input/Input.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Input.sass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Input({\n  type = \"text\",\n  placeholder = \"\",\n  defaultValue = \"\",\n  title = \"\",\n  name = \"\",\n  onChange = e => {},\n  disabled = false,\n  pattern = null,\n  required = false,\n  fullWidth = false,\n  splitterTextArea = \"\\\\n\",\n  rows = 10,\n  constraint = val => {\n    return true;\n  }\n}) {\n  _s();\n  const [value, setValue] = useState(defaultValue);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [filePreview, setFilePreview] = useState(\"\");\n  const handleValue = e => {\n    setValue(e.target.value);\n    onChange(e);\n  };\n  const handleValueFile = e => {\n    setFileLoaded(true);\n    if (e.target.files.length > 0) {\n      let pathFileLoaded = URL.createObjectURL(e.target.files[0]);\n      setFilePreview(pathFileLoaded);\n    }\n    onChange({\n      target: {\n        value: e.target.files,\n        name: e.target.name,\n        type: \"file\"\n      }\n    });\n  };\n  const DefaultvalueFile = () => {\n    if (type === \"file\" && defaultValue !== \"\" && defaultValue.length > 0) {\n      let pathFileLoaded = URL.createObjectURL(defaultValue[defaultValue.length - 1]);\n      setFilePreview(pathFileLoaded);\n    } else setFileLoaded(false);\n  };\n  useEffect(() => {\n    setValue(defaultValue);\n    DefaultvalueFile();\n    onChange({\n      target: {\n        value: defaultValue,\n        name: name\n      }\n    });\n  }, [defaultValue]);\n  const handleNumeric = e => {\n    if (isNaN(+e.target.value)) return \"\";\n    if (constraint(+e.target.value)) {\n      setValue(e.target.value);\n      onChange(e);\n    }\n  };\n  const handleTextArea = e => {\n    let rows = e.target.value.split(\"\\n\");\n    let newText = \"\";\n    rows.forEach(row => newText += row + splitterTextArea);\n    // use this for the default split .replace(/\\\\n/g, \"\\n\")\n    return {\n      target: {\n        value: newText,\n        name: e.target.name\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: type === \"file\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label_\",\n        children: [title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        className: \"label_file_container\",\n        children: !fileLoaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: \" Choose a file... \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), \" \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: filePreview,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          display: \"none\"\n        },\n        autoComplete: \"true\",\n        type: type,\n        name: name,\n        id: name,\n        onChange: handleValueFile,\n        placeholder: placeholder,\n        files: null,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : type === \"textarea\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: name,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: name,\n          autoComplete: \"true\",\n          id: name,\n          placeholder: placeholder,\n          rows: rows,\n          onChange: e => {\n            onChange(handleTextArea(e));\n          },\n          disabled: disabled,\n          defaultValue: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        autoComplete: \"true\",\n        type: type,\n        name: name,\n        required: required,\n        id: name,\n        pattern: pattern,\n        onChange: type === \"numeric\" ? handleNumeric : handleValue,\n        placeholder: placeholder,\n        value: value,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Input, \"kZ4O3aYTP0E7HmZ4WNtEBkRV92c=\");\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Input","type","placeholder","defaultValue","title","name","onChange","e","disabled","pattern","required","fullWidth","splitterTextArea","rows","constraint","val","_s","value","setValue","fileLoaded","setFileLoaded","filePreview","setFilePreview","handleValue","target","handleValueFile","files","length","pathFileLoaded","URL","createObjectURL","DefaultvalueFile","handleNumeric","isNaN","handleTextArea","split","newText","forEach","row","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","src","alt","style","display","autoComplete","id","_c","$RefreshReg$"],"sources":["/home/jaona/myfiles/Jaona/Components/dashboard/src/utilsComponents/Input/Input.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Input.sass\";\r\n\r\nfunction Input({\r\n  type = \"text\",\r\n  placeholder = \"\",\r\n  defaultValue = \"\",\r\n  title = \"\",\r\n  name = \"\",\r\n  onChange = (e) => {},\r\n  disabled = false,\r\n  pattern = null,\r\n  required = false,\r\n  fullWidth = false,\r\n  splitterTextArea = \"\\\\n\",\r\n  rows = 10,\r\n  constraint = (val) => {\r\n    return true;\r\n  },\r\n}) {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const [fileLoaded, setFileLoaded] = useState(false);\r\n  const [filePreview, setFilePreview] = useState(\"\");\r\n  const handleValue = (e) => {\r\n    setValue(e.target.value);\r\n    onChange(e);\r\n  };\r\n\r\n  const handleValueFile = (e) => {\r\n    setFileLoaded(true);\r\n    if (e.target.files.length > 0) {\r\n      let pathFileLoaded = URL.createObjectURL(e.target.files[0]);\r\n      setFilePreview(pathFileLoaded);\r\n    }\r\n    onChange({\r\n      target: {\r\n        value: e.target.files,\r\n        name: e.target.name,\r\n        type: \"file\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const DefaultvalueFile = () => {\r\n    if (type === \"file\" && defaultValue !== \"\" && defaultValue.length > 0) {\r\n      let pathFileLoaded = URL.createObjectURL(defaultValue[defaultValue.length - 1]);\r\n      setFilePreview(pathFileLoaded);\r\n    } else setFileLoaded(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setValue(defaultValue);\r\n    DefaultvalueFile();\r\n    onChange({ target: { value: defaultValue, name: name } });\r\n  }, [defaultValue]);\r\n\r\n  const handleNumeric = (e) => {\r\n    if (isNaN(+e.target.value)) return \"\";\r\n    if (constraint(+e.target.value)) {\r\n      setValue(e.target.value);\r\n      onChange(e);\r\n    }\r\n  };\r\n\r\n  const handleTextArea = (e: any) => {\r\n    let rows = e.target.value.split(\"\\n\");\r\n    let newText = \"\";\r\n    rows.forEach((row: string) => (newText += row + splitterTextArea));\r\n    // use this for the default split .replace(/\\\\n/g, \"\\n\")\r\n    return { target: { value: newText, name: e.target.name } };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {type === \"file\" ? (\r\n        <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n          <div className=\"label_\">{title} </div>\r\n          <label htmlFor={name} className=\"label_file_container\">\r\n            {!fileLoaded ? (\r\n              <>\r\n                <div className=\"span\"> Choose a file... </div>{\" \"}\r\n              </>\r\n            ) : (\r\n              <img src={filePreview} alt=\"\" />\r\n            )}\r\n          </label>\r\n          <input\r\n            style={{ display: \"none\" }}\r\n            autoComplete=\"true\"\r\n            type={type}\r\n            name={name}\r\n            id={name}\r\n            onChange={handleValueFile}\r\n            placeholder={placeholder}\r\n            files={null}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      ) : type === \"textarea\" ? (\r\n        <>\r\n          <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n            <label htmlFor={name}>{title}</label>\r\n            <textarea\r\n              name={name}\r\n              autoComplete=\"true\"\r\n              id={name}\r\n              placeholder={placeholder}\r\n              rows={rows}\r\n              onChange={(e) => {\r\n                onChange(handleTextArea(e));\r\n              }}\r\n              disabled={disabled}\r\n              defaultValue={value}\r\n            ></textarea>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n          <label htmlFor={name}>{title}</label>\r\n          <input\r\n            autoComplete=\"true\"\r\n            type={type}\r\n            name={name}\r\n            required={required}\r\n            id={name}\r\n            pattern={pattern}\r\n            onChange={type === \"numeric\" ? handleNumeric : handleValue}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}