{"ast":null,"code":"export var readUInt8 = function readUInt8(array, offset) {\n  return array[offset];\n};\nexport var readUInt16BE = function readUInt16BE(array, offset) {\n  return array[offset] << 8 | array[offset + 1];\n};\nexport var readUInt16LE = function readUInt16LE(array, offset) {\n  return array[offset] | array[offset + 1] << 8;\n};\nexport var readUInt32BE = function readUInt32BE(array, offset) {\n  return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];\n};\nexport var readUInt32LE = function readUInt32LE(array, offset) {\n  return array[offset] | array[offset + 1] << 8 | array[offset + 2] << 16 | array[offset + 3] << 24;\n};\nexport var uint8ArrayToHexString = function uint8ArrayToHexString(uint8Array) {\n  return Array.from(uint8Array, function (byte) {\n    return byte.toString(16).padStart(2, \"0\");\n  }).join(\"\");\n};\nvar decoder = new TextDecoder(\"utf-8\");\nexport var uint8ArrayToString = function uint8ArrayToString(uint8Array) {\n  return decoder.decode(uint8Array);\n};\nexport var concatenateUint8Arrays = function concatenateUint8Arrays(arrays) {\n  var totalLength = arrays.reduce(function (length, arr) {\n    return length + arr.length;\n  }, 0);\n  var concatenatedArray = new Uint8Array(totalLength);\n  var offset = 0;\n  arrays.forEach(function (arr) {\n    concatenatedArray.set(arr, offset);\n    offset += arr.length;\n  });\n  return concatenatedArray;\n};","map":{"version":3,"names":["readUInt8","array","offset","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","uint8ArrayToHexString","uint8Array","Array","from","byte","toString","padStart","join","decoder","TextDecoder","uint8ArrayToString","decode","concatenateUint8Arrays","arrays","totalLength","reduce","length","arr","concatenatedArray","Uint8Array","forEach","set"],"sources":["/home/jaona/myfiles/Jaona/Components/dashboard/node_modules/jay-peg/src/markers/utils.js"],"sourcesContent":["export const readUInt8 = (array, offset) => {\n  return array[offset];\n};\n\nexport const readUInt16BE = (array, offset) => {\n  return (array[offset] << 8) | array[offset + 1];\n};\n\nexport const readUInt16LE = (array, offset) => {\n  return array[offset] | (array[offset + 1] << 8);\n};\n\nexport const readUInt32BE = (array, offset) => {\n  return (\n    (array[offset] << 24) |\n    (array[offset + 1] << 16) |\n    (array[offset + 2] << 8) |\n    array[offset + 3]\n  );\n};\n\nexport const readUInt32LE = (array, offset) => {\n  return (\n    array[offset] |\n    (array[offset + 1] << 8) |\n    (array[offset + 2] << 16) |\n    (array[offset + 3] << 24)\n  );\n};\n\nexport const uint8ArrayToHexString = (uint8Array) => {\n  return Array.from(uint8Array, (byte) =>\n    byte.toString(16).padStart(2, \"0\"),\n  ).join(\"\");\n};\n\nconst decoder = new TextDecoder(\"utf-8\");\n\nexport const uint8ArrayToString = (uint8Array) => {\n  return decoder.decode(uint8Array);\n};\n\nexport const concatenateUint8Arrays = (arrays) => {\n  const totalLength = arrays.reduce((length, arr) => length + arr.length, 0);\n  const concatenatedArray = new Uint8Array(totalLength);\n\n  let offset = 0;\n\n  arrays.forEach((arr) => {\n    concatenatedArray.set(arr, offset);\n    offset += arr.length;\n  });\n\n  return concatenatedArray;\n};\n"],"mappings":"AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAIC,KAAK,EAAEC,MAAM,EAAK;EAC1C,OAAOD,KAAK,CAACC,MAAM,CAAC;AACtB,CAAC;AAED,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIF,KAAK,EAAEC,MAAM,EAAK;EAC7C,OAAQD,KAAK,CAACC,MAAM,CAAC,IAAI,CAAC,GAAID,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;AACjD,CAAC;AAED,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAYA,CAAIH,KAAK,EAAEC,MAAM,EAAK;EAC7C,OAAOD,KAAK,CAACC,MAAM,CAAC,GAAID,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE;AACjD,CAAC;AAED,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAIJ,KAAK,EAAEC,MAAM,EAAK;EAC7C,OACGD,KAAK,CAACC,MAAM,CAAC,IAAI,EAAE,GACnBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAG,GACxBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE,GACxBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;AAErB,CAAC;AAED,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAYA,CAAIL,KAAK,EAAEC,MAAM,EAAK;EAC7C,OACED,KAAK,CAACC,MAAM,CAAC,GACZD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE,GACvBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAG,GACxBD,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI,EAAG;AAE7B,CAAC;AAED,OAAO,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,UAAU,EAAK;EACnD,OAAOC,KAAK,CAACC,IAAI,CAACF,UAAU,EAAE,UAACG,IAAI;IAAA,OACjCA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAAA,CACpC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACZ,CAAC;AAED,IAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;AAExC,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIT,UAAU,EAAK;EAChD,OAAOO,OAAO,CAACG,MAAM,CAACV,UAAU,CAAC;AACnC,CAAC;AAED,OAAO,IAAMW,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,MAAM,EAAK;EAChD,IAAMC,WAAW,GAAGD,MAAM,CAACE,MAAM,CAAC,UAACC,MAAM,EAAEC,GAAG;IAAA,OAAKD,MAAM,GAAGC,GAAG,CAACD,MAAM;EAAA,GAAE,CAAC,CAAC;EAC1E,IAAME,iBAAiB,GAAG,IAAIC,UAAU,CAACL,WAAW,CAAC;EAErD,IAAInB,MAAM,GAAG,CAAC;EAEdkB,MAAM,CAACO,OAAO,CAAC,UAACH,GAAG,EAAK;IACtBC,iBAAiB,CAACG,GAAG,CAACJ,GAAG,EAAEtB,MAAM,CAAC;IAClCA,MAAM,IAAIsB,GAAG,CAACD,MAAM;EACtB,CAAC,CAAC;EAEF,OAAOE,iBAAiB;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}