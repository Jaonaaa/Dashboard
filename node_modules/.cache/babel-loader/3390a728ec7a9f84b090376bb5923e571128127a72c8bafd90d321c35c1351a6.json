{"ast":null,"code":"var _jsxFileName = \"/home/jaona/myfiles/Jaona/Components/dashboard/src/utilsComponents/Input/Input.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./Input.sass\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Input({\n  type = \"text\",\n  placeholder = \"\",\n  defaultValue = \"\",\n  title,\n  name = \"\",\n  onChange,\n  disabled,\n  pattern,\n  required = false,\n  fullWidth = false,\n  splitterTextArea = \"\\\\n\",\n  rows = 10\n}) {\n  _s();\n  const [value, setValue] = useState(defaultValue);\n  const [fileLoaded, setFileLoaded] = useState(false);\n  const [filePreview, setFilePreview] = useState(\"\");\n  const handleValue = e => {\n    setValue(e.target.value);\n    onChange(e);\n  };\n  const handleValueFile = e => {\n    setFileLoaded(true);\n    onChange(e);\n    if (e.target.files.length > 0) {\n      let pathFileLoaded = URL.createObjectURL(e.target.files[0]);\n      setFilePreview(pathFileLoaded);\n    }\n  };\n  useEffect(() => {\n    setValue(defaultValue);\n    onChange({\n      target: {\n        value: defaultValue,\n        name: name\n      }\n    });\n  }, [defaultValue]);\n  const handleNumeric = e => {\n    if (isNaN(+e.target.value)) return \"\";\n    setValue(e.target.value);\n    onChange(e);\n  };\n  const handleTextArea = e => {\n    let rows = e.target.value.split(\"\\n\");\n    let newText = \"\";\n    rows.forEach(row => newText += row + splitterTextArea);\n    // use this for the default split .replace(/\\\\n/g, \"\\n\")\n    return {\n      target: {\n        value: newText\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: type === \"file\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label_\",\n        children: [title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        className: \"label_file_container\",\n        children: !fileLoaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"span\",\n            children: \" Choose a file... \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), \" \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: filePreview,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          display: \"none\"\n        },\n        autoComplete: \"true\",\n        type: type,\n        name: name,\n        id: name,\n        onChange: handleValueFile,\n        placeholder: placeholder,\n        files: null,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : type === \"textarea\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: name,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: name,\n          autoComplete: \"true\",\n          id: name,\n          placeholder: placeholder,\n          rows: rows,\n          onChange: e => {\n            onChange(handleTextArea(e));\n          },\n          disabled: disabled,\n          defaultValue: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input_ ${fullWidth ? \"fullwidth\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: name,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        autoComplete: \"true\",\n        type: type,\n        name: name,\n        required: required,\n        id: name,\n        pattern: pattern,\n        onChange: type === \"numeric\" ? handleNumeric : handleValue,\n        placeholder: placeholder,\n        value: value,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Input, \"kZ4O3aYTP0E7HmZ4WNtEBkRV92c=\");\n_c = Input;\nexport default Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Input","type","placeholder","defaultValue","title","name","onChange","disabled","pattern","required","fullWidth","splitterTextArea","rows","_s","value","setValue","fileLoaded","setFileLoaded","filePreview","setFilePreview","handleValue","e","target","handleValueFile","files","length","pathFileLoaded","URL","createObjectURL","handleNumeric","isNaN","handleTextArea","split","newText","forEach","row","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","src","alt","style","display","autoComplete","id","_c","$RefreshReg$"],"sources":["/home/jaona/myfiles/Jaona/Components/dashboard/src/utilsComponents/Input/Input.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Input.sass\";\r\n\r\nfunction Input({\r\n  type = \"text\",\r\n  placeholder = \"\",\r\n  defaultValue = \"\",\r\n  title,\r\n  name = \"\",\r\n  onChange,\r\n  disabled,\r\n  pattern,\r\n  required = false,\r\n  fullWidth = false,\r\n  splitterTextArea = \"\\\\n\",\r\n  rows = 10,\r\n}) {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const [fileLoaded, setFileLoaded] = useState(false);\r\n  const [filePreview, setFilePreview] = useState(\"\");\r\n  const handleValue = (e) => {\r\n    setValue(e.target.value);\r\n    onChange(e);\r\n  };\r\n  const handleValueFile = (e) => {\r\n    setFileLoaded(true);\r\n    onChange(e);\r\n    if (e.target.files.length > 0) {\r\n      let pathFileLoaded = URL.createObjectURL(e.target.files[0]);\r\n      setFilePreview(pathFileLoaded);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setValue(defaultValue);\r\n    onChange({ target: { value: defaultValue, name: name } });\r\n  }, [defaultValue]);\r\n\r\n  const handleNumeric = (e) => {\r\n    if (isNaN(+e.target.value)) return \"\";\r\n    setValue(e.target.value);\r\n    onChange(e);\r\n  };\r\n  const handleTextArea = (e) => {\r\n    let rows = e.target.value.split(\"\\n\");\r\n    let newText = \"\";\r\n    rows.forEach((row) => (newText += row + splitterTextArea));\r\n    // use this for the default split .replace(/\\\\n/g, \"\\n\")\r\n    return { target: { value: newText } };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {type === \"file\" ? (\r\n        <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n          <div className=\"label_\">{title} </div>\r\n          <label htmlFor={name} className=\"label_file_container\">\r\n            {!fileLoaded ? (\r\n              <>\r\n                <div className=\"span\"> Choose a file... </div>{\" \"}\r\n              </>\r\n            ) : (\r\n              <img src={filePreview} alt=\"\" />\r\n            )}\r\n          </label>\r\n          <input\r\n            style={{ display: \"none\" }}\r\n            autoComplete=\"true\"\r\n            type={type}\r\n            name={name}\r\n            id={name}\r\n            onChange={handleValueFile}\r\n            placeholder={placeholder}\r\n            files={null}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      ) : type === \"textarea\" ? (\r\n        <>\r\n          <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n            <label htmlFor={name}>{title}</label>\r\n            <textarea\r\n              name={name}\r\n              autoComplete=\"true\"\r\n              id={name}\r\n              placeholder={placeholder}\r\n              rows={rows}\r\n              onChange={(e) => {\r\n                onChange(handleTextArea(e));\r\n              }}\r\n              disabled={disabled}\r\n              defaultValue={value}\r\n            ></textarea>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <div className={`input_ ${fullWidth ? \"fullwidth\" : \"\"}`}>\r\n          <label htmlFor={name}>{title}</label>\r\n          <input\r\n            autoComplete=\"true\"\r\n            type={type}\r\n            name={name}\r\n            required={required}\r\n            id={name}\r\n            pattern={pattern}\r\n            onChange={type === \"numeric\" ? handleNumeric : handleValue}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}